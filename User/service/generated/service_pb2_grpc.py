# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class UserStub(object):
    """What does this service handle???
    1. User Account
    a. Create an account
    b. Retrieve users account infos
    c. Update any user info
    d. Delete a user
    2. Log a user in
    3. Update a user password
    4. Handle a password reset event

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_user = channel.unary_unary(
                '/User/create_user',
                request_serializer=service__pb2.UserInfo.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )
        self.get_user_info = channel.unary_unary(
                '/User/get_user_info',
                request_serializer=service__pb2.GetUser.SerializeToString,
                response_deserializer=service__pb2.UserInfo.FromString,
                )
        self.modify_user = channel.unary_unary(
                '/User/modify_user',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )
        self.delete_user = channel.unary_unary(
                '/User/delete_user',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )
        self.login = channel.unary_unary(
                '/User/login',
                request_serializer=service__pb2.LoginRequest.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )
        self.update_password = channel.unary_unary(
                '/User/update_password',
                request_serializer=service__pb2.PasswordUpdate.SerializeToString,
                response_deserializer=service__pb2.Empty.FromString,
                )


class UserServicer(object):
    """What does this service handle???
    1. User Account
    a. Create an account
    b. Retrieve users account infos
    c. Update any user info
    d. Delete a user
    2. Log a user in
    3. Update a user password
    4. Handle a password reset event

    """

    def create_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_user_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modify_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_password(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_user': grpc.unary_unary_rpc_method_handler(
                    servicer.create_user,
                    request_deserializer=service__pb2.UserInfo.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'get_user_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_user_info,
                    request_deserializer=service__pb2.GetUser.FromString,
                    response_serializer=service__pb2.UserInfo.SerializeToString,
            ),
            'modify_user': grpc.unary_unary_rpc_method_handler(
                    servicer.modify_user,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'delete_user': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_user,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=service__pb2.LoginRequest.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
            'update_password': grpc.unary_unary_rpc_method_handler(
                    servicer.update_password,
                    request_deserializer=service__pb2.PasswordUpdate.FromString,
                    response_serializer=service__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'User', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class User(object):
    """What does this service handle???
    1. User Account
    a. Create an account
    b. Retrieve users account infos
    c. Update any user info
    d. Delete a user
    2. Log a user in
    3. Update a user password
    4. Handle a password reset event

    """

    @staticmethod
    def create_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/User/create_user',
            service__pb2.UserInfo.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_user_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/User/get_user_info',
            service__pb2.GetUser.SerializeToString,
            service__pb2.UserInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modify_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/User/modify_user',
            service__pb2.Empty.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/User/delete_user',
            service__pb2.Empty.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/User/login',
            service__pb2.LoginRequest.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_password(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/User/update_password',
            service__pb2.PasswordUpdate.SerializeToString,
            service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
